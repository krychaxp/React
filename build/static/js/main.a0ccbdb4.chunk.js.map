{"version":3,"sources":["components/Result.js","App.js","service-worker.js","index.js"],"names":["Result","props","searching","value","useState","result","setResult","open","setOpen","alertInfo","setAlertInfo","alertSeverity","setAlertSeverity","useEffect","a","Promise","resolve","reject","test","Paper","elevation","className","Skeleton","variant","width","height","document","body","offsetWidth","setTimeout","url","axios","get","data","avatar_url","html_url","location","name","followers_url","repos_url","followers","public_repos","followersUser","repositoriesUser","src","alt","href","rel","target","AvatarGroup","max","Array","fill","map","v","i","login","id","Avatar","key","description","created_at","updated_at","language","title","replace","search","Fragment","Snackbar","onClose","Alert","severity","App","setValue","setSearching","TextField","label","onChange","e","Button","color","onClick","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a0ccbdb4.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport { Paper, Snackbar, Avatar } from '@material-ui/core';\r\nimport AvatarGroup from '@material-ui/lab/AvatarGroup';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nconst Result = (props) => {\r\n    const { searching, value } = props;\r\n    const [result, setResult] = useState('');\r\n    const [open, setOpen] = useState(false)\r\n    const [alertInfo, setAlertInfo] = useState('')\r\n    const [alertSeverity, setAlertSeverity] = useState('info')\r\n    const whereFinding = () => {\r\n        setResult(\r\n            <Paper elevation={3} className=\"m-10 p-10 flex-center--column\">\r\n                <Skeleton variant=\"rect\" width={300} height={300} className=\"m-10\" />\r\n                <Skeleton variant=\"rect\" width={250} height={100} className=\"m-10\" />\r\n                <Skeleton variant=\"rect\" width={document.body.offsetWidth * 0.9} height={500} className=\"m-10\" />\r\n            </Paper>\r\n        )\r\n    }\r\n    const validation = () => new Promise((resolve, reject) => {\r\n        if (!value) reject(\"Input can not be empty\")\r\n        if (!/^[a-z0-9-]+$/i.test(value)) reject(\"Input can have only \\\"A-z\\\",\\\"0-9\\\" and \\\"-\\\" characters\");\r\n        resolve()\r\n    })\r\n    const submitFunction = () => new Promise((resolve, reject) => {\r\n        setTimeout(async () => {\r\n            const url = `https://api.github.com/users/${value}`;\r\n            try {\r\n                const { data } = await axios.get(url)\r\n                const { avatar_url, html_url, location, name, followers_url, repos_url, followers, public_repos } = data\r\n                const { data: followersUser } = await axios.get(followers_url);\r\n                const { data: repositoriesUser } = await axios.get(repos_url);\r\n                setResult(\r\n                    <Paper elevation={3} className=\"m-10 p-10 flex-center--column\">\r\n                        <Paper className=\"m-10 p-10 flex-center--column\">\r\n                            <h1>{name}</h1>\r\n                            <img src={avatar_url} width=\"200\" alt={name} />\r\n                            {location ? (<div className=\"flex-center\"><LocationOnIcon />{location}</div>) : null}\r\n                            <a className=\"flex-center\" href={html_url} rel=\"noopener noreferrer\" target=\"_blank\">Check profile on GitHub <ExitToAppIcon /></a>\r\n                        </Paper>\r\n                        <Paper className=\"m-10 p-10 flex-center--column\">\r\n                            <h2>Followers ({followers})</h2>\r\n                            <AvatarGroup max={6}>\r\n                                {Array(followers).fill().map((v, i) => {\r\n                                    if (i < 6 && followersUser[i]) {\r\n                                        const { login, id } = followersUser[i];\r\n                                        return <Avatar key={i} alt={login} src={`https://avatars2.githubusercontent.com/u/${id}`} />\r\n                                    } else {\r\n                                        return <Avatar key={i} />\r\n                                    }\r\n                                })}\r\n                            </AvatarGroup>\r\n                        </Paper>\r\n                        <Paper className=\"m-10 p-10 flex-center--column\">\r\n                            <h2>Repositiories ({public_repos})</h2>\r\n                            <div id=\"repositories\" className=\"flex-center--column--stretch\">\r\n                                {repositoriesUser.map((v, i) => {\r\n                                    const { html_url, name, description, created_at, updated_at, language } = v\r\n                                    return (\r\n                                        <a href={html_url} rel=\"noopener noreferrer\" key={i} title={name} target=\"_blank\" className=\"flex-center--column\">\r\n                                            <h1>{name}<br />{language}</h1>\r\n                                            <div>{description}</div>\r\n                                            <div>Created at: {created_at.replace(/T|Z/g, \" \")}</div>\r\n                                            <div>Last updated at: {updated_at.replace(/T|Z/g, \" \")}</div>\r\n                                        </a>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                        </Paper>\r\n                    </Paper>\r\n                )\r\n                resolve()\r\n            } catch (e) { reject('Not Found'); }\r\n\r\n        }, 500)\r\n    })\r\n    useEffect(() => {\r\n        if (!searching) { return }\r\n        const search = async () => {\r\n            try {\r\n                setOpen(true);\r\n                await validation()\r\n                whereFinding();\r\n                setAlertSeverity('info')\r\n                setAlertInfo(`Searching ...`);\r\n                await submitFunction()\r\n                setOpen(false);\r\n            } catch (e) {\r\n                setResult('')\r\n                setAlertSeverity('error')\r\n                setAlertInfo(e);\r\n            }\r\n        };\r\n        search();\r\n    }, [searching])\r\n    return (\r\n        <React.Fragment>\r\n            {result}\r\n            <Snackbar open={open} onClose={() => { setOpen(false) }}>\r\n                <Alert onClose={() => { setOpen(false) }} severity={alertSeverity} variant=\"filled\" elevation={6}>\r\n                    {alertInfo}\r\n                </Alert>\r\n            </Snackbar>\r\n        </React.Fragment>\r\n    );\r\n}\r\nexport default Result","import React, { useState, useEffect } from 'react'\nimport { TextField, Button} from '@material-ui/core';\nimport Result from './components/Result'\n\nexport default function App() {\n  const [value, setValue] = useState('')\n  const [searching, setSearching] = useState(false)\n  useEffect(()=>{\n    setSearching(false)\n  },[searching])\n  return (\n    <React.Fragment>\n      <header>\n        <h1>Something in React</h1>\n      </header>\n      <nav>\n        <div className=\"flex-center\">\n          <TextField className=\"m-10\" label=\"Search user\" variant=\"outlined\" value={value} onChange={(e) => setValue(e.target.value)} />\n          <Button className=\"m-10\" variant=\"contained\" color=\"primary\" onClick={()=>setSearching(true)}>Search</Button>\n        </div>\n      </nav>\n      <main>\n          <Result value={value} searching={searching}/>\n      </main>\n      <footer>\n      </footer>\n    </React.Fragment>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import App from './Form';\nimport './index.css';\nimport * as serviceWorker from './service-worker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App/>\n  </React.StrictMode>,\n  document.getElementById('container')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}